source('~/.active-rstudio-document')
install.packages("eha")
library(eha)
data(eha)
??eha
??mbc
H = 20
a = 1.5
b = 2
bn = b + (1:H) * a
rm(list = ls())
H = 20
a = 1.5
b = 2
bn = b + (1:H) * a
Vn = rbeta(H, rep(a, H), bn)
prod(1 - Vn)
Vn = rbeta(H, rep(a, H), bn)
prod(1 - Vn)
rbeta(H, rep(a, H), bn)
cumprod(1 - Vn)
residual = cumprod(1 - Vn)
rm(list = ls())
H = 200
a = 1.5
b = 2
bn = b + (1:H) * a
Vn = rbeta(H, rep(a, H), bn)
residual = cumprod(1 - Vn)
plot(c(1,residual))
plot(c(1,residual), type = 'l')
abline(h = 0, col = 2, lty = 2)
print(tail(residual, 1))
source('~/.active-rstudio-document')
## simulation
simResiduals = vector('numeric', length = H)
for (i in 1:N){
Vn = rbeta(H, an, bn)
residualProb = cumprod(1 - Vn)
simResiduals[i] = tail(residualProb)
if (i =1) plot(c(1,residualProb), type = 'l') else lines(c(1,residualProb), col = i)
}
for (i in 1:N){
Vn = rbeta(H, an, bn)
residualProb = cumprod(1 - Vn)
simResiduals[i] = tail(residualProb)
if (i == 1) plot(c(1,residualProb), type = 'l') else lines(c(1,residualProb), col = i)
}
rm(list = ls())
H = 2000 ## stick-breaking truncation
N = 10 ## number of MC replications
## prior parameter settings
## beta parameter
a = 1.5
b = 2
## sequence of beta parameters
an = rep(a, H)
bn = b + (1:H) * a
## simulation
simResiduals = vector('numeric', length = H)
for (i in 1:N){
Vn = rbeta(H, an, bn)
residualProb = cumprod(1 - Vn)
simResiduals[i] = tail(residualProb)
if (i == 1) plot(c(1,residualProb), type = 'l') else lines(c(1,residualProb), col = i)
}
## simulation
simResiduals = vector('numeric', length = H)
for (i in 1:N){
Vn = rbeta(H, an, bn)
residualProb = cumprod(1 - Vn)
simResiduals[i] = tail(residualProb, 1)
if (i == 1) plot(c(1,residualProb), type = 'l') else lines(c(1,residualProb), col = i)
}
## simulation
simResiduals = vector('numeric', length = H)
for (i in 1:N){
Vn = rbeta(H, an, bn)
residualProb = cumprod(1 - Vn)
simResiduals[i] = tail(residualProb, 1)
if (i == 1) plot(c(1,residualProb), type = 'l', xlim = c(H/2, H)) else lines(c(1,residualProb), col = i)
}
simResiduals
## simulation
simResiduals = vector('numeric', length = N)
for (i in 1:N){
Vn = rbeta(H, an, bn)
residualProb = cumprod(1 - Vn)
simResiduals[i] = tail(residualProb, 1)
if (i == 1) plot(c(1,residualProb), type = 'l', xlim = c(H/2, H)) else lines(c(1,residualProb), col = i)
}
simResiduals
source('~/.active-rstudio-document')
## simulation
simResiduals = matrix(NA, nrow = H, ncol = N)
for (i in 1:N){
Vn = rbeta(H, an, bn)
simResiduals[,i] = cumprod(1 - Vn)
if (i == 1) plot(c(1,simResiduals[,i]), type = 'l', xlim = c(H/2, H)) else lines(c(1,simResiduals[,i]), col = i)
}
abline(h = 0, col = 2, lty = 2)
for (i in 1:N){
Vn = rbeta(H, an, bn)
simResiduals[,i] = cumprod(1 - Vn)
if (i == 1) plot(c(1,simResiduals[,i]), type = 'l', xlim = c(H/2, H), ylim = c(0,.1)) else lines(c(1,simResiduals[,i]), col = i)
}
indexH = seq(1, H, length.out = 20)
indexH
indexH = round(seq(1, H, length.out = 20))
indexH
i=1
plot(ecdf(simResiduals[indexH[i],]), col = i)
plot(ecdf(simResiduals[indexH[i],]), col = i, lty = 's')
plot(ecdf(simResiduals[indexH[i],]), col = i, type = 's')
plot(ecdf(simResiduals[indexH[i],]), col = i, cex = .2)
if (i == 1) par(add = T)
?par
?ifelse
ifelse(i==1, add = T)
plot(ecdf(simResiduals[indexH[i],]), col = i, cex = .2, ifelse(i==1, add = T))
plot(ecdf(simResiduals[indexH[i],]), col = i, cex = .2, ifelse(i==1, new = T))
plot(ecdf(simResiduals[indexH[i],]), col = i, cex = .2, ifelse(i!=1, new = T))
plot(ecdf(simResiduals[indexH[i],]), col = i, cex = .2, if(i!=1) new = T))
plot(ecdf(simResiduals[indexH[i],]), col = i, cex = .2, if(i!=1) new = T)
if (i == 1) par(new = TRUE)
indexH = round(seq(1, H, length.out = 20))
for(i in 1:length(indexH)){
plot(ecdf(simResiduals[indexH[i],]), col = i, cex = .2)
if (i == 1) par(new = TRUE)
if (i == length(indexH)) par(new = FALSE)
}
indexH = round(seq(1, H, length.out = 20))
for(i in 1:length(indexH)){
plot(ecdf(simResiduals[indexH[i],]), col = i, cex = .2)
if (i != 1) par(new = TRUE)
# if (i == length(indexH)) par(new = FALSE)
}
boxplot(data.frame(t(simResiduals[indexH,])))
indexH = round(seq(1, H, length.out = 20))
for(i in 1:length(indexH)){
plot(ecdf(simResiduals[indexH[i],]), col = i, cex = .2)
if (i != 1) par(new = TRUE)
if (i == length(indexH)) par(new = FALSE)
}
boxplot(data.frame(t(simResiduals[indexH,])))
indexH = round(seq(5, H, length.out = 20))
boxplot(data.frame(t(simResiduals[indexH,])))
indexH = round(seq(100, H, length.out = 20))
boxplot(data.frame(t(simResiduals[indexH,])))
indexH = round(seq(100, H, length.out = 10))
temp = data.frame(t(simResiduals[indexH,]
names(temp) = indexH
boxplot()))
temp = data.frame(t(simResiduals[indexH,]
names(temp) = indexH
boxplot()))
indexH = round(seq(100, H, length.out = 10))
temp = data.frame(t(simResiduals[indexH,]
names(temp) = indexH
boxplot()))
indexH = round(seq(100, H, length.out = 10))
temp = data.frame(t(simResiduals[indexH,]
boxplot(temp)
names(temp) = indexH
temp = data.frame(t(simResiduals[indexH,]
temp = data.frame(t(simResiduals[indexH,])
boxplot(temp)
temp = data.frame(t(simResiduals[indexH,]))
names(temp) = indexH
boxplot(temp)
source('~/.active-rstudio-document')
summary(temp)
plot(1:H, rowMeans(simResiduals))
plot(1:H, rowMeans(simResiduals), type = 'l')
plot(round(H/2):H, rowMeans(simResiduals), type = 'l')
plot(round(H/2):H, rowMeans(simResiduals[round(H/2):H,]), type = 'l')
H = 10000 ## stick-breaking truncation
N = 1000 ## number of MC replications
a = 1.5
b = 2
## sequence of beta parameters
an = rep(a, H)
bn = b + (1:H) * a
## simulation
simResiduals = matrix(NA, nrow = H, ncol = N)
for (i in 1:N){
Vn = rbeta(H, an, bn)
simResiduals[,i] = cumprod(1 - Vn)
# if (i == 1) plot(c(1,simResiduals[,i]), type = 'l', xlim = c(H/2, H), ylim = c(0,.1)) else lines(c(1,simResiduals[,i]), col = i)
}
plot(round(H/2):H, rowMeans(simResiduals[round(H/2):H,]), type = 'l')
source('~/.active-rstudio-document')
plot(round(H/2):H, rowMeans(simResiduals[round(H/2):H,]), type = 'l', main = paste('a =', a, ', b =', b))
source('~/.active-rstudio-document')
# boxplot(temp)
summary(temp)
source('~/.active-rstudio-document')
plot(round(H/2):H, rowMeans(simResiduals[round(H/2):H,]), type = 'l', main = paste('a =', alphaPar, ', b =', betaPar))
source('~/.active-rstudio-document')
rm(list = ls())
H = 20000 ## stick-breaking truncation
N = 500 ## number of MC replications
## prior parameter settings
## beta parameter new process
alphaPar = .5 ## total mass dirichlet
betaPar = .5
## sequence of beta parameter DP
an = 1
bn = alphaPar
## sequence of beta parameters
an = 1 - betaPar
bn = alphaPar +  betaPar * (1:H)
## sequence of beta parameter PY
an = alphaPar
bn = betaPar + (1:H) * alphaPar
plot(cumsum(log(1 + an / bn)))
H = 50000 ## stick-breaking truncation
an = alphaPar
bn = betaPar + (1:H) * alphaPar
plot(cumsum(log(1 + an / bn)), type = 'l')
plot(log(1:H))
H = 100000 ## stick-breaking truncation
an = alphaPar
bn = betaPar + (1:H) * alphaPar
plot(cumsum(log(1 + an / bn)), type = 'l')
max(cumsum(log(1 + an / bn)))
H = 500000 ## stick-breaking truncation
an = alphaPar
bn = betaPar + (1:H) * alphaPar
plot(cumsum(log(1 + an / bn)), type = 'l')
max(cumsum(log(1 + an / bn)))
plot(log(1:H)/(1:H))
plot(log(1 + 1 / (1:H))*(1:H))
t = seq(.1,10, length.out = 1000)
plot(t, log(t), type = 'l'); lines(t, t^.5, col = 2)
plot(t, log(1+t), type = 'l'); lines(t, t^.5, col = 2)
plot(t, log(1+t), type = 'l'); lines(t, t^.1, col = 2)
plot(t, log(1+t), type = 'l'); alpha = .1; lines(t, t^alpha/alpha, col = 2)
plot(t, log(1+t), type = 'l'); alpha = .1; lines(t, t^alpha, col = 2)
plot(t, log(1+t), type = 'l'); alpha = 1; lines(t, t^alpha, col = 2)
plot(t, log(1+t), type = 'l'); alpha = .7; lines(t, t^alpha, col = 2)
plot(t, log(1+t), type = 'l'); alpha = .5; lines(t, t^alpha, col = 2)
plot(t, log(1+t), type = 'l'); alpha = .5; lines(t, (t-1)^alpha, col = 2)
t = seq(1,10, length.out = 1000)
plot(t, log(1+t), type = 'l'); alpha = .5; lines(t, (t-1)^alpha, col = 2)
plot(t, log(t), type = 'l'); alpha = .5; lines(t, (t)^alpha, col = 2)
plot(t, 1 + log(t), type = 'l'); alpha = .5; lines(t, (t)^alpha, col = 2)
plot(t, 1 + log(t), type = 'l'); alpha = .9; lines(t, (t)^alpha, col = 2)
plot(t, 1 + log(t), type = 'l'); alpha = .7; lines(t, (t)^alpha, col = 2)
plot(t, 1 + log(t), type = 'l'); alpha = .6; lines(t, (t)^alpha, col = 2)
plot(t, 1 + log(t), type = 'l'); alpha = .3; lines(t, (t)^alpha, col = 2)
t = seq(1,1000, length.out = 1000)
plot(t, 1 + log(t), type = 'l'); alpha = .3; lines(t, (t)^alpha, col = 2)
t = seq(1,10000, length.out = 1000)
plot(t, 1 + log(t), type = 'l'); alpha = .3; lines(t, (t)^alpha, col = 2)
library(marmap)
library(ggplot2)
data(list = params$data)
autoplot(get(params$data))
rm(list = ls())
## load packages ####
require(spdep)
require(rgdal)
require(maps)
library(maptools)
require(rosm)
require(lubridate)
library(raster)
library(prettymapr)
require(ggplot2)
library(plotly)
library(lubridate)
require(sf)
directory = '~/Documents/lavotex/lavori/covid_19/covid_19_RFiles/dati_protezione_civile/'
oggi = gsub('-', '_', today())
temp = tail(sort(dir('~/Documents/lavotex/lavori/covid_19/covid_19_RFiles/dati_protezione_civile/data/', 'Rdata', full.names = TRUE)),1) ## file da caricare
load(temp)
## presi qua https://www.diva-gis.org/datadown
italyShpRegions <- st_read('../italy_shape/ITA_adm1.shp')
italyShpProvince <- st_read('../italy_shape/ITA_adm2.shp')
datiRegioniDay = subset(datiRegioni, datiRegioni$data == '2020/04/06')
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1IjoiYW5kcmVhLW0iLCJhIjoiY2s4b20zcGFpMDh5cDNldDJ4YTYwNmFlMiJ9.TReLfeIr7ZVEMYMJg2w0-g')
## grafico numero totale di malati su mappa
sizeref = 2. * max(datiRegioniDay$totale_positivi) / (70^2)
plotItaly = plot_mapbox() %>% add_markers(data = datiRegioniDay,
x = ~long,
y = ~lat,
marker = list(
color = 'rgb(17, 157, 255)',
size = ~totale_positivi,
sizeref = sizeref,
sizemode = 'area'
),
# color = ~country.etc,
# colors = "Accent",
text = ~paste(denominazione_regione, totale_positivi),
hoverinfo = "text",
mode = 'scattermapbox',
# showlegend = FALSE
) %>%
layout(mapbox = list(style = 'basic',zoom = 4.8, center = list(lat = 41.9028, lon = 12.4964)))
plotItaly
data.frame(sort(italyShpRegions$VARNAME_1), levels(datiRegioni$denominazione_regione))
## functions #####
changeRate <- function(y){
c(NA, diff(y) / head(y, -1) * 100)
}
plot_ly(italyShpRegions, split = ~NAME_1, color = ~area, type = 'scatter', mode = 'lines', line = list(width = .5)) %>%
layout(legend = list(x = -0, y = .9,  title = list(text = 'Regione'), colorbar = list(title = 'maaaa')))
###############################################################
###                                                       #####
###       RAPPRESENTAZIONE DATI A LIVELLO NAZIONALE       #####
###                                                       #####
###############################################################
datiNazionali$nuovi_tamponi = c(datiNazionali$tamponi[1], diff(datiNazionali$tamponi))
## setting fonts for plotly plots ####
f1 <- list(family = "Arial, sans-serif",
size = 18,
color = "lightgrey" )
f2 <- list( family = "Old Standard TT, serif",
size = 14,
color = "black" )
plot(datiNazionali$data, datiNazionali$nuovi_positivi, xlab = 'Data', ylab = 'Nuovi positivi', main = 'Andamento nuovi casi positivi', pch = 20)
## plot of new cases Italia ####
pNaz = ggplot(data = datiNazionali, aes(x = data))
pNaz = pNaz + geom_point(aes(y = nuovi_positivi, col = nuovi_positivi)) + labs(title = 'Andamento nuovi casi', subtitle = '(Livello nazionale)', x = 'Data', y = 'Nuovi positivi', col = 'Nuovi casi')
pNaz = pNaz + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
plyNaz = ggplotly(pNaz)
## plotly graph national data ####
## nuovi casi e variazione positivi
## setting axis
axis_x <- list(showgrid = T, zeroline = F, nticks = 20, showline = T, title = 'Data', mirror = 'all', tickangle = 45)
axis_y <- list(showgrid = T, zeroline = F, nticks = 10, showline = T, title = 'Numero di casi', mirror = 'all')
plyNazNuovi = plot_ly(data = datiNazionali, x = ~data, y = ~nuovi_positivi, type = 'scatter', mode = 'line', hovertemplate = paste('<b>Nuovi positivi</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>'), name = 'Nuovi positivi') %>%
add_lines(x = ~data, y = ~nuovi_tamponi, name = 'Tamponi', hovertemplate = paste('<b>Tamponi quotidiani</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(x = ~data, y = ~variazione_totale_positivi, name = 'Variazione positivi', hovertemplate = paste('<b>Var. pos.</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
layout(xaxis = axis_x, yaxis = axis_y, xaxis = axis_x, legend = list(x = .05, y = .95))
plyNazNuovi
## nuovi positivi vs tamponi
axis_x <- list(showgrid = T, zeroline = F, nticks = 20, showline = T, title = 'Tamponi', mirror = 'all', tickangle = 45, titlefont = f1)
axis_y <- list(showgrid = T, zeroline = F, nticks = 10, showline = T, title = 'Nuovi casi positivi', mirror = 'all', titlefont = f1)
polyEstimate = loess(data = datiNazionali, nuovi_positivi ~ nuovi_tamponi)
markerPers = list(color = ~as.double(data),
colorscale = 'Viridis',
colorbar = list(
title = 'Data',
tickvals = round(quantile(as.double(datiNazionali$data), seq(0,.75, by = .25))),
ticktext = datiNazionali$data[as.numeric(datiNazionali$data) %in% round(quantile(as.double(datiNazionali$data), seq(0,.75, by = .25)))],
tickmode = 'array'
)
plyTampCases = plot_ly(data = datiNazionali, x = ~nuovi_tamponi, y = ~nuovi_positivi,  type = 'scatter', mode = 'markers', marker = markerPers) %>%
add_trace(x= ~sort(polyEstimate$x), y = ~polyEstimate$fitted[order(polyEstimate$x)], type = 'scatter', mode = 'lines+markers', showlegend = FALSE, marker = list(color = 'orange')) %>%
layout(xaxis = axis_x, yaxis = axis_y)
plyTampCases
## andamento ToTALE Cai a livello nazionale ####
##
axis_x <- list(showgrid = T, zeroline = F, nticks = 20, showline = T, title = 'Data', mirror = 'all', tickangle = 45)
axis_y <- list(showgrid = T, zeroline = F, nticks = 10, showline = T, title = 'Casi positivi totale', mirror = 'all')
plyNazTot = plot_ly(data = datiNazionali, x = ~data) %>%
add_lines(y = ~totale_positivi, name = 'Totale positivi', hovertemplate = paste('<b>Tot. pos.</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~totale_casi, name = 'Totale casi', hovertemplate = paste('<b>Tot. casi</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~ricoverati_con_sintomi, name = 'Ricoverati', hovertemplate = paste('<b>Ricoverati</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~terapia_intensiva, name = "Terapia intensiva", hovertemplate = paste('<b>Intensivi</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~dimessi_guariti, name = "Dimessi", hovertemplate = paste('<b>Dimessi</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~isolamento_domiciliare, name = "Isolamento", hovertemplate = paste('<b>Isolamento</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~deceduti, name = "Deceduti", hovertemplate = paste('<b>Deceduti</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~tamponi, name = "Tamponi", hovertemplate = paste('<b>Tamponi</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
layout(title = 'Casi totali a livello nazionale', xaxis = axis_x, yaxis = axis_y, legend = list(x = 0.1, y = 0.95))
plyNazTot
getwd()
setwd('Documents/lavotex/lavori/covid_19/covid_19_RFiles/')
dir
dir()
setwd('dati_protezione_civile/data/')
setwd('..')
dir)
()
dir()
rm(list = ls())
## load packages ####
require(spdep)
require(rgdal)
require(maps)
library(maptools)
require(rosm)
require(lubridate)
library(raster)
library(prettymapr)
require(ggplot2)
library(plotly)
library(lubridate)
require(sf)
directory = '~/Documents/lavotex/lavori/covid_19/covid_19_RFiles/dati_protezione_civile/'
oggi = gsub('-', '_', today())
temp = tail(sort(dir('~/Documents/lavotex/lavori/covid_19/covid_19_RFiles/dati_protezione_civile/data/', 'Rdata', full.names = TRUE)),1) ## file da caricare
load(temp)
## presi qua https://www.diva-gis.org/datadown
italyShpRegions <- st_read('italy_shape/ITA_adm1.shp')
italyShpProvince <- st_read('italy_shape/ITA_adm2.shp')
rm(list = ls())
## load packages ####
require(spdep)
require(rgdal)
require(maps)
library(maptools)
require(rosm)
require(lubridate)
library(raster)
library(prettymapr)
require(ggplot2)
library(plotly)
library(lubridate)
require(sf)
directory = '~/Documents/lavotex/lavori/covid_19/covid_19_RFiles/dati_protezione_civile/'
oggi = gsub('-', '_', today())
temp = tail(sort(dir('~/Documents/lavotex/lavori/covid_19/covid_19_RFiles/dati_protezione_civile/data/', 'Rdata', full.names = TRUE)),1) ## file da caricare
load(temp)
## presi qua https://www.diva-gis.org/datadown
italyShpRegions <- st_read('italy_shape/ITA_adm1.shp')
italyShpProvince <- st_read('italy_shape/ITA_adm2.shp')
datiRegioniDay = subset(datiRegioni, datiRegioni$data == '2020/04/06')
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1IjoiYW5kcmVhLW0iLCJhIjoiY2s4b20zcGFpMDh5cDNldDJ4YTYwNmFlMiJ9.TReLfeIr7ZVEMYMJg2w0-g')
## grafico numero totale di malati su mappa
sizeref = 2. * max(datiRegioniDay$totale_positivi) / (70^2)
plotItaly = plot_mapbox() %>% add_markers(data = datiRegioniDay,
x = ~long,
y = ~lat,
marker = list(
color = 'rgb(17, 157, 255)',
size = ~totale_positivi,
sizeref = sizeref,
sizemode = 'area'
),
# color = ~country.etc,
# colors = "Accent",
text = ~paste(denominazione_regione, totale_positivi),
hoverinfo = "text",
mode = 'scattermapbox',
# showlegend = FALSE
) %>%
layout(mapbox = list(style = 'basic',zoom = 4.8, center = list(lat = 41.9028, lon = 12.4964)))
plotItaly
data.frame(sort(italyShpRegions$VARNAME_1), levels(datiRegioni$denominazione_regione))
## functions #####
changeRate <- function(y){
c(NA, diff(y) / head(y, -1) * 100)
}
plot_ly(italyShpRegions, split = ~NAME_1, color = ~area, type = 'scatter', mode = 'lines', line = list(width = .5)) %>%
layout(legend = list(x = -0, y = .9,  title = list(text = 'Regione'), colorbar = list(title = 'maaaa')))
###############################################################
###                                                       #####
###       RAPPRESENTAZIONE DATI A LIVELLO NAZIONALE       #####
###                                                       #####
###############################################################
datiNazionali$nuovi_tamponi = c(datiNazionali$tamponi[1], diff(datiNazionali$tamponi))
## setting fonts for plotly plots ####
f1 <- list(family = "Arial, sans-serif",
size = 18,
color = "lightgrey" )
f2 <- list( family = "Old Standard TT, serif",
size = 14,
color = "black" )
plot(datiNazionali$data, datiNazionali$nuovi_positivi, xlab = 'Data', ylab = 'Nuovi positivi', main = 'Andamento nuovi casi positivi', pch = 20)
## plot of new cases Italia ####
pNaz = ggplot(data = datiNazionali, aes(x = data))
pNaz = pNaz + geom_point(aes(y = nuovi_positivi, col = nuovi_positivi)) + labs(title = 'Andamento nuovi casi', subtitle = '(Livello nazionale)', x = 'Data', y = 'Nuovi positivi', col = 'Nuovi casi')
pNaz = pNaz + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
plyNaz = ggplotly(pNaz)
## plotly graph national data ####
## nuovi casi e variazione positivi
## setting axis
axis_x <- list(showgrid = T, zeroline = F, nticks = 20, showline = T, title = 'Data', mirror = 'all', tickangle = 45)
axis_y <- list(showgrid = T, zeroline = F, nticks = 10, showline = T, title = 'Numero di casi', mirror = 'all')
plyNazNuovi = plot_ly(data = datiNazionali, x = ~data, y = ~nuovi_positivi, type = 'scatter', mode = 'line', hovertemplate = paste('<b>Nuovi positivi</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>'), name = 'Nuovi positivi') %>%
add_lines(x = ~data, y = ~nuovi_tamponi, name = 'Tamponi', hovertemplate = paste('<b>Tamponi quotidiani</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(x = ~data, y = ~variazione_totale_positivi, name = 'Variazione positivi', hovertemplate = paste('<b>Var. pos.</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
layout(xaxis = axis_x, yaxis = axis_y, xaxis = axis_x, legend = list(x = .05, y = .95))
plyNazNuovi
## nuovi positivi vs tamponi
axis_x <- list(showgrid = T, zeroline = F, nticks = 20, showline = T, title = 'Tamponi', mirror = 'all', tickangle = 45, titlefont = f1)
axis_y <- list(showgrid = T, zeroline = F, nticks = 10, showline = T, title = 'Nuovi casi positivi', mirror = 'all', titlefont = f1)
polyEstimate = loess(data = datiNazionali, nuovi_positivi ~ nuovi_tamponi)
markerPers = list(color = ~as.double(data),
colorscale = 'Viridis',
colorbar = list(
title = 'Data',
tickvals = round(quantile(as.double(datiNazionali$data), seq(0,.75, by = .25))),
ticktext = datiNazionali$data[as.numeric(datiNazionali$data) %in% round(quantile(as.double(datiNazionali$data), seq(0,.75, by = .25)))],
tickmode = 'array'
)
plyTampCases = plot_ly(data = datiNazionali, x = ~nuovi_tamponi, y = ~nuovi_positivi,  type = 'scatter', mode = 'markers', marker = markerPers) %>%
add_trace(x= ~sort(polyEstimate$x), y = ~polyEstimate$fitted[order(polyEstimate$x)], type = 'scatter', mode = 'lines+markers', showlegend = FALSE, marker = list(color = 'orange')) %>%
layout(xaxis = axis_x, yaxis = axis_y)
plyTampCases
## andamento ToTALE Cai a livello nazionale ####
##
axis_x <- list(showgrid = T, zeroline = F, nticks = 20, showline = T, title = 'Data', mirror = 'all', tickangle = 45)
axis_y <- list(showgrid = T, zeroline = F, nticks = 10, showline = T, title = 'Casi positivi totale', mirror = 'all')
plyNazTot = plot_ly(data = datiNazionali, x = ~data) %>%
add_lines(y = ~totale_positivi, name = 'Totale positivi', hovertemplate = paste('<b>Tot. pos.</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~totale_casi, name = 'Totale casi', hovertemplate = paste('<b>Tot. casi</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~ricoverati_con_sintomi, name = 'Ricoverati', hovertemplate = paste('<b>Ricoverati</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~terapia_intensiva, name = "Terapia intensiva", hovertemplate = paste('<b>Intensivi</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~dimessi_guariti, name = "Dimessi", hovertemplate = paste('<b>Dimessi</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~isolamento_domiciliare, name = "Isolamento", hovertemplate = paste('<b>Isolamento</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~deceduti, name = "Deceduti", hovertemplate = paste('<b>Deceduti</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
add_lines(y = ~tamponi, name = "Tamponi", hovertemplate = paste('<b>Tamponi</b>: %{y}', '<br><b>Giorno</b>: %{x}<br>')) %>%
layout(title = 'Casi totali a livello nazionale', xaxis = axis_x, yaxis = axis_y, legend = list(x = 0.1, y = 0.95))
plyNazTot
plot_ly(italyShpRegions, split = ~NAME_1, color = ~area, type = 'scatter', mode = 'lines', line = list(width = .5))
getwd()
dir()
